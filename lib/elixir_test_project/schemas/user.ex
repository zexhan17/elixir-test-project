defmodule ElixirTestProject.Schemas.User do
  use Ecto.Schema
  # Primary key is a binary_id (UUID) autogenerated by Ecto
  @primary_key {:id, :binary_id, autogenerate: true}
  @derive {Phoenix.Param, key: :id}
  import Ecto.Changeset

  @type t :: %__MODULE__{
          id: Ecto.UUID.t() | nil,
          name: String.t() | nil,
          city: String.t() | nil,
          state: String.t() | nil,
          country: String.t() | nil,
          address: String.t() | nil,
          phone: String.t() | nil,
          phone_code: String.t() | nil,
          password: String.t() | nil,
          password_hash: String.t() | nil,
          is_seller: boolean(),
          online: boolean(),
          last_online_at: DateTime.t() | nil,
          inserted_at: NaiveDateTime.t() | nil,
          updated_at: NaiveDateTime.t() | nil
        }

  schema "users" do
    field :name, :string
    field :city, :string
    field :state, :string
    field :country, :string
    field :address, :string
    field :phone, :string
    field :phone_code, :string
    field :password, :string, virtual: true
    field :password_hash, :string
    field :is_seller, :boolean, default: false
    field :online, :boolean, default: false
    field :last_online_at, :utc_datetime

    timestamps()
  end

  def registration_changeset(user, attrs) do
    user
    |> cast(attrs, [:name, :phone, :phone_code, :password])
    |> validate_required([:name, :phone, :phone_code, :password])
    |> validate_length(:password, min: 10)
    |> unique_constraint(:phone)
    |> put_password_hash()
  end

  def status_changeset(user, attrs) do
    user
    |> cast(attrs, [:online, :last_online_at])
    |> validate_required([:online])
  end

  @doc """
  Changeset used when updating editable profile fields from the frontend.
  Only allows a whitelisted set of attributes and enforces basic length limits.
  """
  def profile_changeset(user, attrs) do
    user
    |> cast(attrs, [:name, :city, :state, :country, :address])
    |> validate_length(:name, min: 1, max: 120)
    |> validate_length(:city, max: 120)
    |> validate_length(:state, max: 120)
    |> validate_length(:country, max: 120)
    |> validate_length(:address, max: 255)
  end

  defp put_password_hash(changeset) do
    case changeset do
      %Ecto.Changeset{valid?: true, changes: %{password: password}} ->
        put_change(changeset, :password_hash, Pbkdf2.hash_pwd_salt(password))

      _ ->
        changeset
    end
  end
end
